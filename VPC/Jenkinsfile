pipeline {
    parameters {
        choice(name: 'terraformAction', choices: ['apply', 'destroy'], description: 'Choose your terraform action to perform')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')     // Jenkins credentials ID
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY') // Jenkins credentials ID
        AWS_DEFAULT_REGION    = "ap-south-1"
    }

    agent any

    stages {
        stage('Checkout') {
            steps {
                git branch: 'terraform', url: 'https://github.com/sharath050175/DevOps.git'
            }
        }

        stage('Plan') {
            steps {
                dir('VPC') {
                    sh 'terraform init'
                    sh 'terraform plan -out=tfplan'
                    sh 'terraform show -no-color tfplan > tfplan.txt'
                }
            }
        }

        stage('Approval') {
            steps {
                script {
                    def plan = readFile 'VPC/tfplan.txt'
                    input message: "Do you want to proceed with Terraform ${params.terraformAction}?",
                          parameters: [text(name: 'plan', description: 'Review the plan before proceeding', defaultValue: plan)]
                }
            }
        }

        stage('Apply or Destroy') {
            when {
                expression { params.terraformAction == 'apply' || params.terraformAction == 'destroy' }
            }
            steps {
                dir('VPC') {
                    script {
                        if (params.terraformAction == 'apply') {
                            sh 'terraform apply -input=false -auto-approve tfplan'
                        } else {
                            sh 'terraform destroy -auto-approve'
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline finished: ${currentBuild.currentResult}"
        }
    }
}
