pipeline {
    parameters {
        choice(name: 'terraformAction', choices: ['apply', 'destroy'], description: 'choose your terraform action to perform')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    agent any

    stages {
        stage('checkout') {
            steps {
                script {
                    dir("terraform") {
                        git branch: terraform, url: 'https://github.com/sharath050175/DevOps.git'
                    }
                }
            }
        }
        stage('plan') {
            steps {
                sh 'pwd; cd VPC/; terraform init'
                sh 'pwd; cd VPC/; terraform plan -out tfplan'
                sh 'pwd; cd VPC/; terraform show -no-color tfplan >> tfplan.txt'
            }
        }

        stage('approval') {
            steps {
                script {
                    def plan = readFile 'VPC/tfplan.txt'
                    input message: "Do you want to proceed with terraform Action...?"
                    parameters: [text(name: 'plan', description: 'can you review your code one more time', defaultValue: plan)]
                }
            }
        }

        stage('Apply or destroy') {
            when {
                expression {
                    return params.terraformAction == 'apply' || params.terraformAction == 'destroy'
                }
            }
            steps {
                script {
                    if (params.terraformAction == 'apply') {
                        sh "pwd; cd VPC/; terraform apply -input=false tfplan"
                    } else if (params.terraformAction == 'destroy') {
                        sh "pwd; cd VPC/; terraform destroy -auto-approve"
                    }
                }
            }
        }
    }
}
